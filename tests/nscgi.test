# -*- Tcl -*-

package require tcltest 2.2
namespace import -force ::tcltest::*

::tcltest::configure {*}$argv

if {[ns_config test listenport] ne ""} {
    testConstraint serverListen true
}

#
# Check configured tclsh from configuration file and set test
# constraint based on this.
#
set tclsh [ns_config ns/interps/CGIinterps .cgi]
testConstraint tclsh [expr {$tclsh ne ""}]

test nscgi-1.0 {basic request} -constraints {serverListen tclsh} -body {
    nstest::http -getbody 1 GET /hello.cgi
} -returnCodes {error ok} -match glob -result {*You are using NaviServer*}

test nscgi-1.1 {check required and provided variables} -constraints {serverListen tclsh} -body {
    nstest::http -getbody 1 GET /info.cgi
} -returnCodes {error ok} -match glob -result {*missing 0*}

#
# Check server names
#
test nscgi-1.2.0 {check SERVER_NAME} -constraints {serverListen tclsh} -body {
    nstest::http \
        -setheaders [list Host test] \
        -getbody 1 GET /info.cgi?var=SERVER_NAME
} -returnCodes {error ok} -match glob -result "*SERVER_NAME: <test>*}"

test nscgi-1.2.1 {check SERVER_NAME with trusted virtual host} -constraints {serverListen tclsh} -body {
    nstest::http \
                -setheaders [list Host example.com] \
                -getbody 1 GET /info.cgi?var=SERVER_NAME
} -returnCodes {error ok} -match glob -result "*SERVER_NAME: <example.com>*"

test nscgi-1.2.2 {check SERVER_NAME with untrusted virtual host} -constraints {serverListen tclsh} -body {
    nstest::http \
                -setheaders [list Host hacker.com] \
                -getbody 1 GET /info.cgi?var=SERVER_NAME
} -returnCodes {error ok} -match glob -result "*SERVER_NAME: <test>*"

#
# Nonzero return code
#
test nscgi-1.3.1 {
    Check behavior when scripts ends with nonzero return code
} -constraints {serverListen tclsh} -body {
    #ns_logctl severity Debug(request) on
    nstest::http GET /info.cgi?rc=-1
} -returnCodes {error ok} -result 500

test nscgi-1.3.2 {
    Check behavior when scripts ends with zero return code, but has no header and no content
} -constraints {serverListen tclsh} -body {
    #ns_logctl severity Debug(request) on
    nstest::http GET /info.cgi?rc=0
} -returnCodes {error ok} -result 500

#
# Status code settings
#
test nscgi-1.4.1 {
    Setting an HTTP status code
} -constraints {serverListen tclsh} -body {
    #ns_logctl severity Debug(request) on
    nstest::http GET /info.cgi?status=503&content=test
} -returnCodes {error ok} -result 503

test nscgi-1.4.2 {
    Setting an HTTP status code and a location
    https://bugs.php.net/bug.php?id=51749
} -constraints {serverListen tclsh} -body {
    #ns_logctl severity Debug(cgi) on
    #ns_logctl severity Debug(request) on
    nstest::http GET /info.cgi?status=503&location=http://www.php.net/
} -returnCodes {error ok} -result 503

#
# Redirects
#
test nscgi-1.5.1 {
    Local Redirect Response 6.2.2
    https://datatracker.ietf.org/doc/html/rfc3875#section-6.2.2

    Currently, Local Redirect Response behaves like Client Redirect Response
} -constraints {serverListen tclsh knownBug} -body {
    #ns_logctl severity Debug(cgi) on
    #ns_logctl severity Debug(request) on
    nstest::http -getheaders {Location} GET /info.cgi?location=/test.html
} -returnCodes {error ok} -result {200 {}}

test nscgi-1.5.2 {
    Client Redirect Response 6.2.3
    https://datatracker.ietf.org/doc/html/rfc3875#section-6.2.3
} -constraints {serverListen tclsh} -body {
    #ns_logctl severity Debug(cgi) on
    #ns_logctl severity Debug(request) on
    nstest::http -getheaders {Location} GET /info.cgi?location=http://www.php.net/
} -returnCodes {error ok} -result {302 http://www.php.net/}

test nscgi-1.5.3 {
    Client Redirect Response with Document 6.2.4
    https://datatracker.ietf.org/doc/html/rfc3875#section-6.2.4
} -constraints {serverListen tclsh} -body {
    #ns_logctl severity Debug(cgi) on
    #ns_logctl severity Debug(request) on
    nstest::http -getheaders {Location} GET /info.cgi?location=http://www.php.net/&content=test
} -returnCodes {error ok} -result {302 http://www.php.net/}


#
# AUTH_TYPE
#
test nscgi-1.6.1 {check empty AUTH_TYPE} -constraints {serverListen tclsh} -body {
    nstest::http -getbody 1 GET /info.cgi?var=AUTH_TYPE
} -returnCodes {error ok} -match glob -result "*AUTH_TYPE: <>*"

test nscgi-1.6.2 {check set AUTH_TYPE} -constraints {serverListen tclsh} -body {
    set authString "Basic [ns_uuencode x:y]"
    nstest::http -setheaders [list authorization $authString] \
        -getbody 1 GET /info.cgi?var=AUTH_TYPE
} -returnCodes {error ok} -match glob -result "*AUTH_TYPE: <Basic>*"

#
# PATH_INFO and PATH_TRANSLATED
#
test nscgi-1.7.1.0 {check basic PATH_INFO} -constraints {serverListen tclsh} -body {
    #ns_logctl severity Debug(cgi) on
    nstest::http -getbody 1 GET /cgi/listdir.tclcgi?var=PATH_INFO
} -returnCodes {error ok} -match glob -result "*PATH_INFO: <>*"

test nscgi-1.7.1.1 {check basic PATH_INFO} -constraints {serverListen tclsh} -body {
    #ns_logctl severity Debug(cgi) on
    nstest::http -getbody 1 GET /info.cgi?var=PATH_INFO
} -returnCodes {error ok} -match glob -result "*PATH_INFO: <>*"

test nscgi-1.7.2.0 {check basic PATH_TRANSLATED} -constraints {serverListen tclsh} -body {
    #ns_logctl severity Debug(cgi) on
    nstest::http -getbody 1 GET /info.cgi?var=PATH_TRANSLATED
} -returnCodes {error ok} -match glob -result "*PATH_TRANSLATED: <*pages/info.cgi>*"

test nscgi-1.7.2.1 {check basic PATH_TRANSLATED} -constraints {serverListen tclsh} -body {
    #ns_logctl severity Debug(cgi) on
    nstest::http -getbody 1 GET /cgi/listdir.tclcgi?var=PATH_TRANSLATED
} -returnCodes {error ok} -match glob -result "*PATH_TRANSLATED: <*pages/cgi/listdir.tclcgi>*"

cleanupTests

# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
