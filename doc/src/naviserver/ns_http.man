[include version_include.man]
[manpage_begin ns_http n [vset version]]
[moddesc {NaviServer Built-in Commands}]

[titledesc {Simple HTTP client functionality}]

[description]

This command provides a simple HTTP and HTTPS client functionality.

[section {COMMANDS}]

[list_begin definitions]

[call [cmd "ns_http cancel"] \
	[arg id]]

Cancel queued HTTP/HTTPS request by id (id of request).

[call [cmd "ns_http cleanup"]]

Cancel all pending HTTP/HTTPS requests

[call [cmd "ns_http list"]]

Returns the list of currently running or pending requests in format:
id url done|running ....

[call [cmd "ns_http queue"] \
	[opt [option "-method [arg M]"]] \
	[opt [option "-headers [arg ns_set]"]] \
	[opt [option "-body [arg B]"]] \
	[opt [option "-body_file [arg fn]"]] \
	[opt [option "-timeout [arg T]"]] \
	[opt [option "-keep_host_header"]] \
	[opt [option "-cafile [arg CA ]"]] \
	[opt [option "-capath [arg CP ]"]] \
	[opt [option "-cert [arg C]"]] \
	[opt [option "-hostname [arg HOSTNAME ]"]] \
	[opt [option "-verify"]] \
	[arg url] \
	]
[para]
The command [cmd "ns_http queue"] opens a connection to the web server
denoted in the [arg url] and returns on success the [arg id] of the HTTP
request, which might be used later in a [cmd "ns_http wait"] 
or [cmd "ns_http cancel"] command to refer to this request. The
command supports HTTP and HTTPS URIs.

[list_begin options]

[opt_def -method [arg M]]
use the specified HTTP method such as GET or POST or HEAD

[opt_def -headers [arg ns_set]]
headers is the ns_set ID containing the additional headers to include in the HTTP request.

[opt_def -body [arg B]]
body is the value which will be sent as the HTTP request body.
This option is mutual exclusive with [option -body_file].

[opt_def -body_file [arg fn]]
transmit the file specified via filename as the HTTP request body.
This option is mutual exclusive with [option -body].

[opt_def -timeout [arg T]]
Timeout for how long to wait for finishing the whole request
(default 2:0, secs:microsesc)

[opt_def -keep_host_header]
allows the Host: header field for the request to be passed in via the [option -headers] arg. 
Otherwise it is overwritten.


[opt_def "-cafile" [arg CA]]
allows for HTTPS URIs to specify the locations, at which CA
certificates for verification purposes are located. The certificates
available via [term cafile] and [term capath] are trusted.
The [term cafile] points to a file of CA certificates in PEM format.
The file can contain several CA certificates.

[opt_def "-capath" [arg CP]]
allows for HTTPS URIs to specify the locations, at which CA
certificates for verification purposes are located. [term capath] points to a
directory containing CA certificates in PEM format. The files each
contain one CA certificate. For more details, see
https://www.openssl.org/docs/manmaster/ssl/SSL_CTX_load_verify_locations.html

[opt_def "-cert" [arg C]]
allows for HTTPS URIs to use the specified client certificate. The
certificates must be in PEM format and must be sorted starting with
the subject's certificate (actual client or server certificate),
followed by intermediate CA certificates if applicable, and ending at
the highest level (root) CA.

[opt_def "-hostname" [arg HOSTNAME]]
allows for HTTPS URIs to specify the hostname for the server
certificate. This option has to be used, when the host supports
virtual hosting, is configured with multiple certificates and supports
the SNI (Server Name Indication) extension of TLS.

[opt_def -verify]
allows for HTTPS URIs to specify that the server certificate should be
verified. If the verification process fails, the TLS/SSL handshake is
immediately terminated with an alert message containing the reason for
the verification failure. If no server certificate is sent, because an
anonymous cipher is used, this option is ignored.
[list_end]



[call [cmd "ns_http run"] \
	[opt [option "-method [arg M]"]] \
	[opt [option "-headers [arg S]"]] \
	[opt [option "-body [arg B]"]] \
	[opt [option "-body_file [arg fn]"]] \
	[opt [option "-timeout [arg T]"]] \
	[opt [option "-keep_host_header"]] \
	[opt [option "-cafile [arg CA ]"]] \
	[opt [option "-capath [arg CP ]"]] \
	[opt [option "-cert [arg C]"]] \
	[opt [option "-hostname [arg HOSTNAME ]"]] \
	[opt [option "-outputfile [arg fn]"]] \
	[opt [option "-verify"]] \
	[arg url] \
	]

[para] 
Send a HTTP request and wait for the result.  The command
[cmd "ns_http run"] is similar to [cmd "ns_http queue"] followed by 
[cmd "ns_http wait"]. This command returns the same values as
[cmd "ns_http wait"].


[call [cmd "ns_http wait"] \
	[opt [option "-body_file [arg fn]"]] \
	[opt [option "-decompress"]] \
	[opt [option "-elapsed [arg varName]"]] \
	[opt [option "-file [arg varName]"]] \
	[opt [option "-headers [arg ns_set]"]] \
	[opt [option "-outputfile [arg fn]"]] \
	[opt [option "-result [arg varName]"]] \
	[opt [option "-spoolsize [arg int]"]] \
	[opt [option "-status [arg varName]"]] \
	[opt [option "-timeout [arg t]"]] \
	[arg id]]

[para]
Run the queued command specified by the [term id] returned from
[cmd "ns_http queue"].
The command [cmd "ns_http wait"] specifies, how the results of request
should be delivered and what information should be obtained from the
request in which form. The command waits until the request is
finished. For retrieving large content (e.g. .mp4 files) from a
server, it is recommended to use the [option -spoolsize] option,
since per default the results are received into memory.

[para]
[cmd "ns_http run"] returns on success
a dict containing the HTTP [term status], the elapsed [term time],
the [cmd ns_set] of the reply [term headers] and either the reply
[term body] or the name of the spooled [term file].

[list_begin options]

[opt_def -decompress]
In opt_def the response has a content encoding of gzip, automatically
decompress the result

[opt_def -elapsed [arg varName]]
varName is the name of a variable that should be used to store the elapsed
time for the request from beginning to finish

[opt_def -file [arg varName]]
varName is the name of a variable that will contain the name of the 
temporary file in case the request was larger than [option -spoolsize]

[opt_def -headers [arg ns_set]]
headers is the ns_set ID which will receive the headers from the HTTP response.

[opt_def -outputfile [arg fn]]
forces to write the content of the reply into a file with the given name.

[opt_def -result [arg varName]]
varName is the name of a variable that should be used to store the HTTP response body.

[opt_def -spoolsize [arg int]]
In case the result is larger than spoolsize, it will be spooled to a
temporary file returned in the variable denoted by [option -file].

[opt_def -status [arg varName]]
varName is the name of a variable that should be used to store the HTTP response status

[opt_def -timeout [arg t]] 
Optional timeout for the [cmd wait] subcommand. The task
might wait for input until the specified timeout for input. Might be
governed by the total timeout specified in the [cmd queue] subcommand.


[list_end]

[list_begin arguments]
[arg_def "" id]
ID of the HTTP request to wait for.

[list_end]
[list_end]

[section EXAMPLES]

First, a minimal example:
[example_begin]
   % ns_http queue http://www.google.com
   http0
   
   % ns_http wait http0
   status 302 time 0:97095 headers d0 body { ... }
[example_end]

[para] The second example is a code snippet making a requests via
HTTPS, where the http handle is put into the Tcl variable "h".
Note that HTTPS only works when NaviServer was compiled with
OpenSSL support. The result of [cmd "ns_http wait"] is saved
in the variable [variable result], from which finally the
HTTP status is extracted.

[example_begin]
   % set h [lb]ns_http queue https://www.google.com[rb]
   % set result [lb]ns_http wait -status S -result R $h[rb]
   % dict get $result status
   302
[example_end]

If you are connecting to a server with virtual hosting, that provides
multiple certificates via SNI (Server Name Indication), you have to
provide the option [option -hostname].

[para] The third example is a code snippet making a POST requests via
https and provides url-encoded POST data. The examples sets a larger
timeout on the request, provides requests headers and returns
reply-headers.

[example_begin]
 #######################
 # construct POST data
 #######################
 
 set post_data {}
 foreach {key value} {
   q NaviServer
 } {
     lappend post_data "[lb]ns_urlencode $key[rb]=[lb]ns_urlencode $value[rb]"
 }
 set post_data [lb]join $post_data &[rb]
 
 
 #######################
 # submit POST request
 #######################
 set requestHeaders [lb]ns_set create[rb]
 set replyHeaders [lb]ns_set create[rb]
 ns_set update $requestHeaders "Content-type" "application/x-www-form-urlencoded"
 
 set h [lb]ns_http queue -method POST \
     -headers $requestHeaders \
     -timeout 10.0 \
     -body $post_data \
     https://duckduckgo.com/[rb]
 ns_http wait -result R -headers $replyHeaders -status S $h
 
 #######################
 # output results
 #######################
 ns_log notice "status code $S"
 ns_log notice "reply $R"
[example_end]


The forth example is a code snippet that sets a larger timeout on the
request, provides a ns_set for the reply headers, and spools
results to a file, when the result is larger than 100 bytes.

[example_begin]
 set replyHeaders [lb]ns_set create[rb]
 ns_set update $requestHeaders Host localhost
 
 set h [lb]ns_http queue -timeout 10.0 http://www.google.com[rb]
 ns_http wait -result R -headers $replyHeaders -status S -spoolsize 1000 -file F $h
 
 if {[lb]info exists F[rb]} {
   ns_log notice "Spooled [lb]file size $F[rb] bytes to $F"
   file delete -- $F
 } else {
   ns_log notice "Got [lb]string length $R[rb] bytes"
 }
[example_end]

Example for downloading a file from the web:

[example_begin]
 % ns_http run -outputfile /tmp/reply.html http://www.google.com
 status 302 time 0:132577 headers d2 file /tmp/reply.html
[example_end]

[see_also ns_httptime ns_set ns_urlencode]
[keywords "global builtin" http-client HTTP HTTPS POST GET nssock spooling SNI]

[manpage_end]

